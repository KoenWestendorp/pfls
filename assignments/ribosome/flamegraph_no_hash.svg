<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="646" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="629.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="629.00"> </text><svg id="frames" x="10" width="1180" total_samples="202"><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.99%)</title><rect x="0.9901%" y="533" width="0.9901%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="2"/><text x="1.2401%" y="543.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.99%)</title><rect x="0.9901%" y="517" width="0.9901%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="2"/><text x="1.2401%" y="527.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.50%)</title><rect x="1.4851%" y="501" width="0.4950%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="1"/><text x="1.7351%" y="511.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 2.97%)</title><rect x="0.0000%" y="549" width="2.9703%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="6"/><text x="0.2500%" y="559.50">[ld..</text></g><g><title>[unknown] (2 samples, 0.99%)</title><rect x="1.9802%" y="533" width="0.9901%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="2"/><text x="2.2302%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.99%)</title><rect x="1.9802%" y="517" width="0.9901%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="2"/><text x="2.2302%" y="527.50"></text></g><g><title>[unknown] (2 samples, 0.99%)</title><rect x="1.9802%" y="501" width="0.9901%" height="15" fill="rgb(207,160,47)" fg:x="4" fg:w="2"/><text x="2.2302%" y="511.50"></text></g><g><title>[unknown] (2 samples, 0.99%)</title><rect x="1.9802%" y="485" width="0.9901%" height="15" fill="rgb(228,23,34)" fg:x="4" fg:w="2"/><text x="2.2302%" y="495.50"></text></g><g><title>[unknown] (2 samples, 0.99%)</title><rect x="1.9802%" y="469" width="0.9901%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="2"/><text x="2.2302%" y="479.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 3.47%)</title><rect x="0.0000%" y="565" width="3.4653%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="7"/><text x="0.2500%" y="575.50">[ld..</text></g><g><title>[unknown] (1 samples, 0.50%)</title><rect x="2.9703%" y="549" width="0.4950%" height="15" fill="rgb(250,228,42)" fg:x="6" fg:w="1"/><text x="3.2203%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 1.49%)</title><rect x="3.4653%" y="277" width="1.4851%" height="15" fill="rgb(240,193,28)" fg:x="7" fg:w="3"/><text x="3.7153%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;ribosome::AminoAcid&gt;]&gt; (3 samples, 1.49%)</title><rect x="3.4653%" y="261" width="1.4851%" height="15" fill="rgb(216,20,37)" fg:x="7" fg:w="3"/><text x="3.7153%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;ribosome::AminoAcid&gt;&gt; (3 samples, 1.49%)</title><rect x="3.4653%" y="245" width="1.4851%" height="15" fill="rgb(206,188,39)" fg:x="7" fg:w="3"/><text x="3.7153%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;ribosome::AminoAcid&gt;&gt; (3 samples, 1.49%)</title><rect x="3.4653%" y="229" width="1.4851%" height="15" fill="rgb(217,207,13)" fg:x="7" fg:w="3"/><text x="3.7153%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 1.49%)</title><rect x="3.4653%" y="213" width="1.4851%" height="15" fill="rgb(231,73,38)" fg:x="7" fg:w="3"/><text x="3.7153%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 1.49%)</title><rect x="3.4653%" y="197" width="1.4851%" height="15" fill="rgb(225,20,46)" fg:x="7" fg:w="3"/><text x="3.7153%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 1.49%)</title><rect x="3.4653%" y="181" width="1.4851%" height="15" fill="rgb(210,31,41)" fg:x="7" fg:w="3"/><text x="3.7153%" y="191.50"></text></g><g><title>cfree (3 samples, 1.49%)</title><rect x="3.4653%" y="165" width="1.4851%" height="15" fill="rgb(221,200,47)" fg:x="7" fg:w="3"/><text x="3.7153%" y="175.50"></text></g><g><title>[libc.so.6] (3 samples, 1.49%)</title><rect x="3.4653%" y="149" width="1.4851%" height="15" fill="rgb(226,26,5)" fg:x="7" fg:w="3"/><text x="3.7153%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;ribosome::AminoAcid&gt;&gt;&gt; (4 samples, 1.98%)</title><rect x="3.4653%" y="293" width="1.9802%" height="15" fill="rgb(249,33,26)" fg:x="7" fg:w="4"/><text x="3.7153%" y="303.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;ribosome::AminoAcid&gt;&gt;&gt; (1 samples, 0.50%)</title><rect x="4.9505%" y="277" width="0.4950%" height="15" fill="rgb(235,183,28)" fg:x="10" fg:w="1"/><text x="5.2005%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.50%)</title><rect x="4.9505%" y="261" width="0.4950%" height="15" fill="rgb(221,5,38)" fg:x="10" fg:w="1"/><text x="5.2005%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.50%)</title><rect x="4.9505%" y="245" width="0.4950%" height="15" fill="rgb(247,18,42)" fg:x="10" fg:w="1"/><text x="5.2005%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.50%)</title><rect x="4.9505%" y="229" width="0.4950%" height="15" fill="rgb(241,131,45)" fg:x="10" fg:w="1"/><text x="5.2005%" y="239.50"></text></g><g><title>cfree (1 samples, 0.50%)</title><rect x="4.9505%" y="213" width="0.4950%" height="15" fill="rgb(249,31,29)" fg:x="10" fg:w="1"/><text x="5.2005%" y="223.50"></text></g><g><title>[libc.so.6] (1 samples, 0.50%)</title><rect x="4.9505%" y="197" width="0.4950%" height="15" fill="rgb(225,111,53)" fg:x="10" fg:w="1"/><text x="5.2005%" y="207.50"></text></g><g><title>[libc.so.6] (1 samples, 0.50%)</title><rect x="4.9505%" y="181" width="0.4950%" height="15" fill="rgb(238,160,17)" fg:x="10" fg:w="1"/><text x="5.2005%" y="191.50"></text></g><g><title>[libc.so.6] (1 samples, 0.50%)</title><rect x="4.9505%" y="165" width="0.4950%" height="15" fill="rgb(214,148,48)" fg:x="10" fg:w="1"/><text x="5.2005%" y="175.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 2.48%)</title><rect x="8.9109%" y="277" width="2.4752%" height="15" fill="rgb(232,36,49)" fg:x="18" fg:w="5"/><text x="9.1609%" y="287.50">&lt;c..</text></g><g><title>core::str::validations::next_code_point (5 samples, 2.48%)</title><rect x="8.9109%" y="261" width="2.4752%" height="15" fill="rgb(209,103,24)" fg:x="18" fg:w="5"/><text x="9.1609%" y="271.50">co..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 2.48%)</title><rect x="8.9109%" y="245" width="2.4752%" height="15" fill="rgb(229,88,8)" fg:x="18" fg:w="5"/><text x="9.1609%" y="255.50">&lt;c..</text></g><g><title>&lt;ribosome::DNA as core::convert::From&lt;char&gt;&gt;::from (1 samples, 0.50%)</title><rect x="11.3861%" y="277" width="0.4950%" height="15" fill="rgb(213,181,19)" fg:x="23" fg:w="1"/><text x="11.6361%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (40 samples, 19.80%)</title><rect x="11.8812%" y="277" width="19.8020%" height="15" fill="rgb(254,191,54)" fg:x="24" fg:w="40"/><text x="12.1312%" y="287.50">alloc::vec::Vec&lt;T,A&gt;::push</text></g><g><title>core::ptr::write (1 samples, 0.50%)</title><rect x="31.1881%" y="261" width="0.4950%" height="15" fill="rgb(241,83,37)" fg:x="63" fg:w="1"/><text x="31.4381%" y="271.50"></text></g><g><title>ribosome::read_dna (54 samples, 26.73%)</title><rect x="5.4455%" y="293" width="26.7327%" height="15" fill="rgb(233,36,39)" fg:x="11" fg:w="54"/><text x="5.6955%" y="303.50">ribosome::read_dna</text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.50%)</title><rect x="31.6832%" y="277" width="0.4950%" height="15" fill="rgb(226,3,54)" fg:x="64" fg:w="1"/><text x="31.9332%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;&amp;str&gt;&gt;::from_iter (1 samples, 0.50%)</title><rect x="31.6832%" y="261" width="0.4950%" height="15" fill="rgb(245,192,40)" fg:x="64" fg:w="1"/><text x="31.9332%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;&amp;str&gt;&gt;::extend (1 samples, 0.50%)</title><rect x="31.6832%" y="245" width="0.4950%" height="15" fill="rgb(238,167,29)" fg:x="64" fg:w="1"/><text x="31.9332%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.50%)</title><rect x="31.6832%" y="229" width="0.4950%" height="15" fill="rgb(232,182,51)" fg:x="64" fg:w="1"/><text x="31.9332%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.50%)</title><rect x="31.6832%" y="213" width="0.4950%" height="15" fill="rgb(231,60,39)" fg:x="64" fg:w="1"/><text x="31.9332%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.50%)</title><rect x="31.6832%" y="197" width="0.4950%" height="15" fill="rgb(208,69,12)" fg:x="64" fg:w="1"/><text x="31.9332%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.50%)</title><rect x="31.6832%" y="181" width="0.4950%" height="15" fill="rgb(235,93,37)" fg:x="64" fg:w="1"/><text x="31.9332%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;&amp;str&gt;&gt;::extend::{{closure}} (1 samples, 0.50%)</title><rect x="31.6832%" y="165" width="0.4950%" height="15" fill="rgb(213,116,39)" fg:x="64" fg:w="1"/><text x="31.9332%" y="175.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.50%)</title><rect x="31.6832%" y="149" width="0.4950%" height="15" fill="rgb(222,207,29)" fg:x="64" fg:w="1"/><text x="31.9332%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.50%)</title><rect x="31.6832%" y="133" width="0.4950%" height="15" fill="rgb(206,96,30)" fg:x="64" fg:w="1"/><text x="31.9332%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.50%)</title><rect x="31.6832%" y="117" width="0.4950%" height="15" fill="rgb(218,138,4)" fg:x="64" fg:w="1"/><text x="31.9332%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.50%)</title><rect x="31.6832%" y="101" width="0.4950%" height="15" fill="rgb(250,191,14)" fg:x="64" fg:w="1"/><text x="31.9332%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.50%)</title><rect x="31.6832%" y="85" width="0.4950%" height="15" fill="rgb(239,60,40)" fg:x="64" fg:w="1"/><text x="31.9332%" y="95.50"></text></g><g><title>[libc.so.6] (1 samples, 0.50%)</title><rect x="31.6832%" y="69" width="0.4950%" height="15" fill="rgb(206,27,48)" fg:x="64" fg:w="1"/><text x="31.9332%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.50%)</title><rect x="31.6832%" y="53" width="0.4950%" height="15" fill="rgb(225,35,8)" fg:x="64" fg:w="1"/><text x="31.9332%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.50%)</title><rect x="39.6040%" y="261" width="0.4950%" height="15" fill="rgb(250,213,24)" fg:x="80" fg:w="1"/><text x="39.8540%" y="271.50"></text></g><g><title>ribosome::transcribe_dna (18 samples, 8.91%)</title><rect x="32.1782%" y="293" width="8.9109%" height="15" fill="rgb(247,123,22)" fg:x="65" fg:w="18"/><text x="32.4282%" y="303.50">ribosome::tra..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (18 samples, 8.91%)</title><rect x="32.1782%" y="277" width="8.9109%" height="15" fill="rgb(231,138,38)" fg:x="65" fg:w="18"/><text x="32.4282%" y="287.50">alloc::vec::V..</text></g><g><title>core::ptr::write (2 samples, 0.99%)</title><rect x="40.0990%" y="261" width="0.9901%" height="15" fill="rgb(231,145,46)" fg:x="81" fg:w="2"/><text x="40.3490%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.50%)</title><rect x="40.5941%" y="245" width="0.4950%" height="15" fill="rgb(251,118,11)" fg:x="82" fg:w="1"/><text x="40.8441%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.50%)</title><rect x="41.0891%" y="261" width="0.4950%" height="15" fill="rgb(217,147,25)" fg:x="83" fg:w="1"/><text x="41.3391%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.50%)</title><rect x="41.0891%" y="245" width="0.4950%" height="15" fill="rgb(247,81,37)" fg:x="83" fg:w="1"/><text x="41.3391%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.50%)</title><rect x="41.0891%" y="229" width="0.4950%" height="15" fill="rgb(209,12,38)" fg:x="83" fg:w="1"/><text x="41.3391%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.50%)</title><rect x="41.0891%" y="213" width="0.4950%" height="15" fill="rgb(227,1,9)" fg:x="83" fg:w="1"/><text x="41.3391%" y="223.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.50%)</title><rect x="41.0891%" y="197" width="0.4950%" height="15" fill="rgb(248,47,43)" fg:x="83" fg:w="1"/><text x="41.3391%" y="207.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.50%)</title><rect x="41.0891%" y="181" width="0.4950%" height="15" fill="rgb(221,10,30)" fg:x="83" fg:w="1"/><text x="41.3391%" y="191.50"></text></g><g><title>realloc (1 samples, 0.50%)</title><rect x="41.0891%" y="165" width="0.4950%" height="15" fill="rgb(210,229,1)" fg:x="83" fg:w="1"/><text x="41.3391%" y="175.50"></text></g><g><title>[libc.so.6] (1 samples, 0.50%)</title><rect x="41.0891%" y="149" width="0.4950%" height="15" fill="rgb(222,148,37)" fg:x="83" fg:w="1"/><text x="41.3391%" y="159.50"></text></g><g><title>[libc.so.6] (1 samples, 0.50%)</title><rect x="41.0891%" y="133" width="0.4950%" height="15" fill="rgb(234,67,33)" fg:x="83" fg:w="1"/><text x="41.3391%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.50%)</title><rect x="41.0891%" y="117" width="0.4950%" height="15" fill="rgb(247,98,35)" fg:x="83" fg:w="1"/><text x="41.3391%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.50%)</title><rect x="41.0891%" y="101" width="0.4950%" height="15" fill="rgb(247,138,52)" fg:x="83" fg:w="1"/><text x="41.3391%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.50%)</title><rect x="41.0891%" y="85" width="0.4950%" height="15" fill="rgb(213,79,30)" fg:x="83" fg:w="1"/><text x="41.3391%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.50%)</title><rect x="41.0891%" y="69" width="0.4950%" height="15" fill="rgb(246,177,23)" fg:x="83" fg:w="1"/><text x="41.3391%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.50%)</title><rect x="41.0891%" y="53" width="0.4950%" height="15" fill="rgb(230,62,27)" fg:x="83" fg:w="1"/><text x="41.3391%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.50%)</title><rect x="41.0891%" y="37" width="0.4950%" height="15" fill="rgb(216,154,8)" fg:x="83" fg:w="1"/><text x="41.3391%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.99%)</title><rect x="41.0891%" y="277" width="0.9901%" height="15" fill="rgb(244,35,45)" fg:x="83" fg:w="2"/><text x="41.3391%" y="287.50"></text></g><g><title>core::ptr::write (1 samples, 0.50%)</title><rect x="41.5842%" y="261" width="0.4950%" height="15" fill="rgb(251,115,12)" fg:x="84" fg:w="1"/><text x="41.8342%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.50%)</title><rect x="43.5644%" y="261" width="0.4950%" height="15" fill="rgb(240,54,50)" fg:x="88" fg:w="1"/><text x="43.8144%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.50%)</title><rect x="43.5644%" y="245" width="0.4950%" height="15" fill="rgb(233,84,52)" fg:x="88" fg:w="1"/><text x="43.8144%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.50%)</title><rect x="43.5644%" y="229" width="0.4950%" height="15" fill="rgb(207,117,47)" fg:x="88" fg:w="1"/><text x="43.8144%" y="239.50"></text></g><g><title>ribosome::find_start_position (17 samples, 8.42%)</title><rect x="42.0792%" y="277" width="8.4158%" height="15" fill="rgb(249,43,39)" fg:x="85" fg:w="17"/><text x="42.3292%" y="287.50">ribosome::fi..</text></g><g><title>core::array::equality::&lt;impl core::cmp::PartialEq&lt;[A: N]&gt; for [B]&gt;::eq (13 samples, 6.44%)</title><rect x="44.0594%" y="261" width="6.4356%" height="15" fill="rgb(209,38,44)" fg:x="89" fg:w="13"/><text x="44.3094%" y="271.50">core::ar..</text></g><g><title>core::array::equality::&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (13 samples, 6.44%)</title><rect x="44.0594%" y="245" width="6.4356%" height="15" fill="rgb(236,212,23)" fg:x="89" fg:w="13"/><text x="44.3094%" y="255.50">core::ar..</text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;Other,_&gt;&gt;::spec_eq (13 samples, 6.44%)</title><rect x="44.0594%" y="229" width="6.4356%" height="15" fill="rgb(242,79,21)" fg:x="89" fg:w="13"/><text x="44.3094%" y="239.50">&lt;T as co..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (13 samples, 6.44%)</title><rect x="44.0594%" y="213" width="6.4356%" height="15" fill="rgb(211,96,35)" fg:x="89" fg:w="13"/><text x="44.3094%" y="223.50">core::sl..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (13 samples, 6.44%)</title><rect x="44.0594%" y="197" width="6.4356%" height="15" fill="rgb(253,215,40)" fg:x="89" fg:w="13"/><text x="44.3094%" y="207.50">&lt;[A] as ..</text></g><g><title>core::iter::traits::iterator::Iterator::all (13 samples, 6.44%)</title><rect x="44.0594%" y="181" width="6.4356%" height="15" fill="rgb(211,81,21)" fg:x="89" fg:w="13"/><text x="44.3094%" y="191.50">core::it..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (13 samples, 6.44%)</title><rect x="44.0594%" y="165" width="6.4356%" height="15" fill="rgb(208,190,38)" fg:x="89" fg:w="13"/><text x="44.3094%" y="175.50">core::it..</text></g><g><title>core::iter::traits::iterator::Iterator::all::check::{{closure}} (1 samples, 0.50%)</title><rect x="50.0000%" y="149" width="0.4950%" height="15" fill="rgb(235,213,38)" fg:x="101" fg:w="1"/><text x="50.2500%" y="159.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal::{{closure}} (1 samples, 0.50%)</title><rect x="50.0000%" y="133" width="0.4950%" height="15" fill="rgb(237,122,38)" fg:x="101" fg:w="1"/><text x="50.2500%" y="143.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.50%)</title><rect x="50.0000%" y="117" width="0.4950%" height="15" fill="rgb(244,218,35)" fg:x="101" fg:w="1"/><text x="50.2500%" y="127.50"></text></g><g><title>&lt;ribosome::RNA as core::cmp::PartialEq&gt;::eq (1 samples, 0.50%)</title><rect x="50.0000%" y="101" width="0.4950%" height="15" fill="rgb(240,68,47)" fg:x="101" fg:w="1"/><text x="50.2500%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.50%)</title><rect x="63.3663%" y="261" width="0.4950%" height="15" fill="rgb(210,16,53)" fg:x="128" fg:w="1"/><text x="63.6163%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.50%)</title><rect x="63.3663%" y="245" width="0.4950%" height="15" fill="rgb(235,124,12)" fg:x="128" fg:w="1"/><text x="63.6163%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.50%)</title><rect x="63.3663%" y="229" width="0.4950%" height="15" fill="rgb(224,169,11)" fg:x="128" fg:w="1"/><text x="63.6163%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.50%)</title><rect x="63.3663%" y="213" width="0.4950%" height="15" fill="rgb(250,166,2)" fg:x="128" fg:w="1"/><text x="63.6163%" y="223.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.50%)</title><rect x="63.3663%" y="197" width="0.4950%" height="15" fill="rgb(242,216,29)" fg:x="128" fg:w="1"/><text x="63.6163%" y="207.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.50%)</title><rect x="63.3663%" y="181" width="0.4950%" height="15" fill="rgb(230,116,27)" fg:x="128" fg:w="1"/><text x="63.6163%" y="191.50"></text></g><g><title>realloc (1 samples, 0.50%)</title><rect x="63.3663%" y="165" width="0.4950%" height="15" fill="rgb(228,99,48)" fg:x="128" fg:w="1"/><text x="63.6163%" y="175.50"></text></g><g><title>[libc.so.6] (1 samples, 0.50%)</title><rect x="63.3663%" y="149" width="0.4950%" height="15" fill="rgb(253,11,6)" fg:x="128" fg:w="1"/><text x="63.6163%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.50%)</title><rect x="63.3663%" y="133" width="0.4950%" height="15" fill="rgb(247,143,39)" fg:x="128" fg:w="1"/><text x="63.6163%" y="143.50"></text></g><g><title>__rust_realloc (1 samples, 0.50%)</title><rect x="64.3564%" y="149" width="0.4950%" height="15" fill="rgb(236,97,10)" fg:x="130" fg:w="1"/><text x="64.6064%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 1.49%)</title><rect x="64.3564%" y="197" width="1.4851%" height="15" fill="rgb(233,208,19)" fg:x="130" fg:w="3"/><text x="64.6064%" y="207.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 1.49%)</title><rect x="64.3564%" y="181" width="1.4851%" height="15" fill="rgb(216,164,2)" fg:x="130" fg:w="3"/><text x="64.6064%" y="191.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 1.49%)</title><rect x="64.3564%" y="165" width="1.4851%" height="15" fill="rgb(220,129,5)" fg:x="130" fg:w="3"/><text x="64.6064%" y="175.50"></text></g><g><title>realloc (2 samples, 0.99%)</title><rect x="64.8515%" y="149" width="0.9901%" height="15" fill="rgb(242,17,10)" fg:x="131" fg:w="2"/><text x="65.1015%" y="159.50"></text></g><g><title>[libc.so.6] (1 samples, 0.50%)</title><rect x="65.3465%" y="133" width="0.4950%" height="15" fill="rgb(242,107,0)" fg:x="132" fg:w="1"/><text x="65.5965%" y="143.50"></text></g><g><title>[libc.so.6] (1 samples, 0.50%)</title><rect x="65.3465%" y="117" width="0.4950%" height="15" fill="rgb(251,28,31)" fg:x="132" fg:w="1"/><text x="65.5965%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 1.98%)</title><rect x="64.3564%" y="213" width="1.9802%" height="15" fill="rgb(233,223,10)" fg:x="130" fg:w="4"/><text x="64.6064%" y="223.50">a..</text></g><g><title>malloc (1 samples, 0.50%)</title><rect x="65.8416%" y="197" width="0.4950%" height="15" fill="rgb(215,21,27)" fg:x="133" fg:w="1"/><text x="66.0916%" y="207.50"></text></g><g><title>[libc.so.6] (1 samples, 0.50%)</title><rect x="65.8416%" y="181" width="0.4950%" height="15" fill="rgb(232,23,21)" fg:x="133" fg:w="1"/><text x="66.0916%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 2.48%)</title><rect x="64.3564%" y="245" width="2.4752%" height="15" fill="rgb(244,5,23)" fg:x="130" fg:w="5"/><text x="64.6064%" y="255.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 2.48%)</title><rect x="64.3564%" y="229" width="2.4752%" height="15" fill="rgb(226,81,46)" fg:x="130" fg:w="5"/><text x="64.6064%" y="239.50">al..</text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.50%)</title><rect x="66.3366%" y="213" width="0.4950%" height="15" fill="rgb(247,70,30)" fg:x="134" fg:w="1"/><text x="66.5866%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.50%)</title><rect x="66.3366%" y="197" width="0.4950%" height="15" fill="rgb(212,68,19)" fg:x="134" fg:w="1"/><text x="66.5866%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (8 samples, 3.96%)</title><rect x="63.8614%" y="261" width="3.9604%" height="15" fill="rgb(240,187,13)" fg:x="129" fg:w="8"/><text x="64.1114%" y="271.50">allo..</text></g><g><title>core::ptr::write (2 samples, 0.99%)</title><rect x="66.8317%" y="245" width="0.9901%" height="15" fill="rgb(223,113,26)" fg:x="135" fg:w="2"/><text x="67.0817%" y="255.50"></text></g><g><title>all (202 samples, 100%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(206,192,2)" fg:x="0" fg:w="202"/><text x="0.2500%" y="607.50"></text></g><g><title>ribosome (202 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(241,108,4)" fg:x="0" fg:w="202"/><text x="0.2500%" y="591.50">ribosome</text></g><g><title>_start (195 samples, 96.53%)</title><rect x="3.4653%" y="565" width="96.5347%" height="15" fill="rgb(247,173,49)" fg:x="7" fg:w="195"/><text x="3.7153%" y="575.50">_start</text></g><g><title>__libc_start_main (195 samples, 96.53%)</title><rect x="3.4653%" y="549" width="96.5347%" height="15" fill="rgb(224,114,35)" fg:x="7" fg:w="195"/><text x="3.7153%" y="559.50">__libc_start_main</text></g><g><title>[libc.so.6] (195 samples, 96.53%)</title><rect x="3.4653%" y="533" width="96.5347%" height="15" fill="rgb(245,159,27)" fg:x="7" fg:w="195"/><text x="3.7153%" y="543.50">[libc.so.6]</text></g><g><title>main (195 samples, 96.53%)</title><rect x="3.4653%" y="517" width="96.5347%" height="15" fill="rgb(245,172,44)" fg:x="7" fg:w="195"/><text x="3.7153%" y="527.50">main</text></g><g><title>std::rt::lang_start_internal (195 samples, 96.53%)</title><rect x="3.4653%" y="501" width="96.5347%" height="15" fill="rgb(236,23,11)" fg:x="7" fg:w="195"/><text x="3.7153%" y="511.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (195 samples, 96.53%)</title><rect x="3.4653%" y="485" width="96.5347%" height="15" fill="rgb(205,117,38)" fg:x="7" fg:w="195"/><text x="3.7153%" y="495.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (195 samples, 96.53%)</title><rect x="3.4653%" y="469" width="96.5347%" height="15" fill="rgb(237,72,25)" fg:x="7" fg:w="195"/><text x="3.7153%" y="479.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (195 samples, 96.53%)</title><rect x="3.4653%" y="453" width="96.5347%" height="15" fill="rgb(244,70,9)" fg:x="7" fg:w="195"/><text x="3.7153%" y="463.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (195 samples, 96.53%)</title><rect x="3.4653%" y="437" width="96.5347%" height="15" fill="rgb(217,125,39)" fg:x="7" fg:w="195"/><text x="3.7153%" y="447.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (195 samples, 96.53%)</title><rect x="3.4653%" y="421" width="96.5347%" height="15" fill="rgb(235,36,10)" fg:x="7" fg:w="195"/><text x="3.7153%" y="431.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (195 samples, 96.53%)</title><rect x="3.4653%" y="405" width="96.5347%" height="15" fill="rgb(251,123,47)" fg:x="7" fg:w="195"/><text x="3.7153%" y="415.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (195 samples, 96.53%)</title><rect x="3.4653%" y="389" width="96.5347%" height="15" fill="rgb(221,13,13)" fg:x="7" fg:w="195"/><text x="3.7153%" y="399.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (195 samples, 96.53%)</title><rect x="3.4653%" y="373" width="96.5347%" height="15" fill="rgb(238,131,9)" fg:x="7" fg:w="195"/><text x="3.7153%" y="383.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (195 samples, 96.53%)</title><rect x="3.4653%" y="357" width="96.5347%" height="15" fill="rgb(211,50,8)" fg:x="7" fg:w="195"/><text x="3.7153%" y="367.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (195 samples, 96.53%)</title><rect x="3.4653%" y="341" width="96.5347%" height="15" fill="rgb(245,182,24)" fg:x="7" fg:w="195"/><text x="3.7153%" y="351.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (195 samples, 96.53%)</title><rect x="3.4653%" y="325" width="96.5347%" height="15" fill="rgb(242,14,37)" fg:x="7" fg:w="195"/><text x="3.7153%" y="335.50">core::ops::function::FnOnce::call_once</text></g><g><title>ribosome::main (195 samples, 96.53%)</title><rect x="3.4653%" y="309" width="96.5347%" height="15" fill="rgb(246,228,12)" fg:x="7" fg:w="195"/><text x="3.7153%" y="319.50">ribosome::main</text></g><g><title>ribosome::translate_all (119 samples, 58.91%)</title><rect x="41.0891%" y="293" width="58.9109%" height="15" fill="rgb(213,55,15)" fg:x="83" fg:w="119"/><text x="41.3391%" y="303.50">ribosome::translate_all</text></g><g><title>ribosome::translate (100 samples, 49.50%)</title><rect x="50.4950%" y="277" width="49.5050%" height="15" fill="rgb(209,9,3)" fg:x="102" fg:w="100"/><text x="50.7450%" y="287.50">ribosome::translate</text></g><g><title>ribosome::codons::dict (65 samples, 32.18%)</title><rect x="67.8218%" y="261" width="32.1782%" height="15" fill="rgb(230,59,30)" fg:x="137" fg:w="65"/><text x="68.0718%" y="271.50">ribosome::codons::dict</text></g></svg></svg>